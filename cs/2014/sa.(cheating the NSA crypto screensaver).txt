struct NTSfile{
	char * filename;
	struct NTSfile * next;
};

struct NTSfile * create_NTSfile(){
	struct NTSfile * retval = malloc(sizeof(struct NTSfile));
	retval -> filename = NULL;
	retval -> next = NULL;
	return retval;
};

struct NTSword{
	char * word;
	struct NTSword * next;
	struct NTSfile * filelist;
};

struct NTSword * create_NTSword(){
	struct NTSword * retval = malloc(sizeof(struct NTSword));
	retval -> word = NULL;
	retval -> next = NULL;
	retval -> filelist = NULL;
	return retval;
};

struct sa_struct{
	struct NTSword * wordlist;
};

void add_NTSword_to_sa_struct(struct NTSword * myword, struct sa_struct){

}

void add_NTSfile_to_NTSword(struct NTSfile * myfile, struct NTSword * myword){
	
}

void trim_non_duplicates_for_sa(struct sa_struct * mysastruct){

}

void sa(searchable_index * searchableIndex, char * tokens){

	char * word = malloc(sizeof(char)*256);//max query term size is 256 chars

	word = strtok(tokens, " ");//word should now be "sa"

	while(word!=NULL){//loop through tokens
		word = strtok(NULL, " ");
		if(word == NULL)
			break;
	}
}
